#!/bin/bash

# Database Auto-backup Script
# Har soat database'ni avtomatik saqlaydi va git'ga commit qiladi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"
DB_FILE="$PROJECT_DIR/database/db.json"
BACKUP_DIR="$PROJECT_DIR/database/backups"
LOG_FILE="$PROJECT_DIR/database/backup.log"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" | tee -a "$LOG_FILE"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1" | tee -a "$LOG_FILE"
}

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

# Check if database exists
if [ ! -f "$DB_FILE" ]; then
    error "Database file not found: $DB_FILE"
    exit 1
fi

# Create timestamped backup filename
TIMESTAMP=$(date +'%Y%m%d_%H%M%S')
BACKUP_FILE="$BACKUP_DIR/db_backup_$TIMESTAMP.json"

# Copy database to backup
log "📦 Creating backup: $BACKUP_FILE"
cp "$DB_FILE" "$BACKUP_FILE"

if [ $? -eq 0 ]; then
    log "✅ Backup created successfully"
else
    error "Failed to create backup"
    exit 1
fi

# Get database stats
if command -v python3 &> /dev/null; then
    STATS=$(python3 -c "
import json
try:
    with open('$DB_FILE', 'r') as f:
        data = json.load(f)
    blocked = len(data.get('blocked_users', []))
    messages = len(data.get('messages', []))
    groups = len(data.get('telegram_groups', []))
    print(f'Blocked: {blocked}, Messages: {messages}, Groups: {groups}')
except Exception as e:
    print(f'Error: {e}')
")
    log "📊 Database stats: $STATS"
fi

# Commit to git (if in git repo)
cd "$PROJECT_DIR"
if [ -d .git ]; then
    log "📝 Committing backup to git..."

    git add "$BACKUP_FILE"

    COMMIT_MSG="🔄 Auto-backup: $(date +'%Y-%m-%d %H:%M:%S')

Database stats: $STATS

🤖 Generated by auto-backup script"

    git commit -m "$COMMIT_MSG" >/dev/null 2>&1

    if [ $? -eq 0 ]; then
        log "✅ Backup committed to git"

        # Try to push (optional - don't fail if it doesn't work)
        git push origin main >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            log "✅ Backup pushed to remote"
        else
            warn "⚠️  Could not push to remote (this is OK)"
        fi
    else
        warn "⚠️  No changes to commit (database unchanged)"
    fi
fi

# Clean up old backups (keep last 72 hours = 72 backups)
log "🧹 Cleaning up old backups..."
cd "$BACKUP_DIR"
ls -t db_backup_*.json | tail -n +73 | xargs -r rm
REMAINING=$(ls db_backup_*.json 2>/dev/null | wc -l)
log "📁 Backup files remaining: $REMAINING"

log "✅ Backup process completed!"
